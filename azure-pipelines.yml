# Xcode

# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

variables:
  COVERITY_TOOL_HOME: $(Agent.BuildDirectory)/cov-analysis

trigger:
- develop

pool:
  vmImage: 'macos-latest'

steps:
# Cache Coverity installation (good for MacOS, as installation take time)
- task: Cache@2
  inputs:
    key: '"coverity-analysis-2020.06" | "$(Agent.OS)"'
    path: $(COVERITY_TOOL_HOME)
    cacheHitVar: CACHE_RESTORED
  displayName: 'Cache Coverity Tool Installation'

# Copy and install Coverity analysis package (not not cached)
- script: |
    cd $(Agent.BuildDirectory)
    curl -s -L --user admin:$(COVERITY_AUTHKEY) -o license.dat $(COVERITY_URL)/downloadFile.htm?fn=license.dat
    curl -s -L --user admin:$(COVERITY_AUTHKEY) -o cov-analysis-macosx-2020.06.sh $(COVERITY_URL)/downloadFile.htm?fn=cov-analysis-macosx-2020.06.sh
    bash cov-analysis-macosx-2020.06.sh -q --installation.dir=$(Agent.BuildDirectory)/cov-analysis-macosx-2020.06 --license.region=6 --license.agreement=agree --license.type.choice=0 --license.cov.path=$(Agent.BuildDirectory)/license.dat --component.cov-wizard=false --component.dotnet-sdk=false --component.skip.documentation=true 
    mv cov-analysis-macosx-2020.06 cov-analysis
    cp license.dat ./cov-analysis/bin
  condition: ne(variables.CACHE_RESTORED, 'true')
  displayName: 'Install Coverity'

# Optimization?
# bash <(curl -s -L --user admin:$(COVERITY_AUTHKEY) $(COVERITY_URL)/downloadFile.htm?fn=cov-analysis-macosx-2020.06.sh) -q --installation.dir=./cov-analysis-macosx-2020.06 --license.region=6 --license.agreement=agree --license.type.choice=0 --license.cov.path=./license.dat --component.cov-wizard=false --component.dotnet-sdk=false --component.skip.documentation=true 

# Configure Coverity
- script: |
    $(COVERITY_TOOL_HOME)/bin/cov-configure --swift
  condition: ne(variables.CACHE_RESTORED, 'true')
  displayName: 'Configure Coverity'

# Workaround to use Modern Build System
- task: CmdLine@2
  inputs:
    script: |
      cat >swiftc.c <<EOL
      #include <unistd.h>
      const char driver_mode[7] = "swiftc";
      int main(int argc, char *argv[]) {
        argv[0] = (char *)driver_mode;
        return execv("/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift", argv);
      }
      EOL
      clang swiftc.c -o swiftc
      rm /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc
      cp swiftc /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
      echo $(Build.Repository.LocalPath)

#- task: Xcode@5
#  inputs:
#    actions: 'build'
#    configuration: 'Release'
#    sdk: 'iphoneos'
#    scheme: 'ENACommunity'
#    packageApp: false

# Coverity scan
- task: synopsys-coverity@1
  inputs:
    coverityService: 'coverity-vm-cwa-app-ios'
    projectName: 'Corona Warn App - iOS'
    streamName: 'az-cwa-app-ios'
    coverityBuildDirectory: '$(Build.Repository.LocalPath)'
    #buildCommand: /usr/bin/xcodebuild -sdk iphoneos -configuration Release -workspace $(Build.Repository.LocalPath)/src/xcode/ENA/ENA.xcodeproj/project.xcworkspace -scheme ENACommunity build CODE_SIGNING_ALLOWED=NO | /usr/local/lib/ruby/gems/2.6.0/bin/xcpretty -r junit --no-color
    buildCommand: /usr/bin/xcodebuild -sdk iphoneos -configuration Release -workspace $(Build.Repository.LocalPath)/src/xcode/ENA/ENA.xcodeproj/project.xcworkspace -scheme ENACommunity build CODE_SIGNING_ALLOWED=NO
    allowUntrusted: true
    coverityRunType: 'buildanalyzecommit'
    customCommandArgs: true
    covAnalyzeArgs: '--webapp-security --android-security --distrust-all --webapp-security-aggressiveness-level high --enable-audit-checkers --enable-audit-dataflow'
    covBuildArgs: '--fs-capture-search .'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Agent.BuildDirectory)/idir/build-log.txt'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    publishLocation: 'pipeline'